name: Fly Deploy
on:
  workflow_run:
    workflows: ["update to the next jad"]
    types:
      - completed

jobs:
  deploy:
    name: Deploy app
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'repository_dispatch' }}
    steps:
      - uses: actions/checkout@v3
      - name: Install envsubst
        run: sudo apt-get install -y gettext-base

      - name: Log original jadwal.yml content
        run: |
          echo "Original jadwal.yml content:"
          cat jadwal.yml

      - name: Substitute environment variables
        run: |
          envsubst < jadwal.yml > jadwal_processed.yml
        env:
          user_nm: ${{ secrets.user_nm }}
          url: ${{ secrets.url }}
          time: ${{ secrets.time }}
          spaces: ${{ secrets.spaces }}
          quota: ${{ secrets.quota }}
          poli_id: ${{ secrets.poli_id }}
          messages_key: ${{ secrets.messages_key }}
          key: ${{ secrets.key }}
          fungsi: ${{ secrets.fungsi }}
          else: ${{ secrets.else }}

      - name: Log processed jadwal.yml content
        run: |
          echo "Processed jadwal.yml content:"
          cat jadwal_processed.yml

      - name: Compare original and processed files
        run: |
          if diff jadwal.yml jadwal_processed.yml; then
            echo "No changes were made to jadwal.yml"
          else
            echo "Changes were made to jadwal.yml"
            diff jadwal.yml jadwal_processed.yml || true
          fi

      - name: Check for Tailscale update
        id: check_tailscale
        run: |
          LAST_COMMIT_AUTHOR=$(git log -1 --pretty=format:'%an')
          CHANGED_FILES=$(git diff-tree --no-commit-id --name-only -r HEAD)
          if [[ "$LAST_COMMIT_AUTHOR" == "GitHub Action: auto update tailscale" && "$CHANGED_FILES" == *"Dockerfile"* ]]; then
            echo "TAILSCALE_UPDATED=true" >> $GITHUB_OUTPUT
          else
            echo "TAILSCALE_UPDATED=false" >> $GITHUB_OUTPUT
          fi

      - uses: superfly/flyctl-actions/setup-flyctl@master
      
      - name: Deploy to Fly.io
        run: |
          # Check if TAILSCALE_AUTH_KEY is set
          if [ -z "$TAILSCALE_AUTH_KEY" ]; then
            echo "Error: TAILSCALE_AUTH_KEY is not set. Please add it to your repository secrets."
            exit 1
          fi
          
          cp jadwal_processed.yml jadwal.yml
          echo "Final jadwal.yml content:"
          cat jadwal.yml
          
          # Get the organization slug
          FLY_ORG=$(flyctl orgs list --json | jq -r 'keys[0]')
          if [ -z "$FLY_ORG" ]; then
            echo "Error: Unable to determine organization slug"
            exit 1
          fi
          echo "Organization slug: $FLY_ORG"

          # Check if the app exists, if not create it
          if ! flyctl apps list --org="$FLY_ORG" | grep -q "fly-jad-bot"; then
            echo "App does not exist. Creating..."
            flyctl apps create fly-jad-bot --org="$FLY_ORG"
          else
            echo "App already exists."
          fi

          # Check and manage Fly.io volumes
          volumes=$(flyctl volumes list --app fly-jad-bot --json)
          volume_count=$(echo "$volumes" | jq length)

          if [ "$volume_count" -eq 0 ]; then
            echo "No volumes exist. Creating 'tailscale_data'..."
            flyctl volumes create tailscale_data --app fly-jad-bot --region sin --size 1 -y
            
            # Check again after creation
            volumes=$(flyctl volumes list --app fly-jad-bot --json)
            volume_count=$(echo "$volumes" | jq length)
          fi

          if [ "$volume_count" -eq 1 ]; then
            echo "One volume exists. This is correct."
          elif [ "$volume_count" -gt 1 ]; then
            echo "Multiple volumes found. Keeping the first and removing others..."
            keep_id=$(echo "$volumes" | jq -r '.[0].id')
            echo "$volumes" | jq -r '.[1:][].id' | while read -r volume_id; do
              echo "Removing extra volume: $volume_id"
              flyctl volumes destroy "$volume_id" --app fly-jad-bot
            done
          fi

          # Check if shared IPv4 exists, if not allocate one
          if ! flyctl ips list | grep -q "v4"; then
            echo "Shared IPv4 does not exist. Allocating..."
            flyctl ips allocate-v4 --shared
          else
            echo "Shared IPv4 already exists."
          fi

          # Check if IPv6 exists, if not allocate one
          if ! flyctl ips list | grep -q "v6"; then
            echo "IPv6 does not exist. Allocating..."
            flyctl ips allocate-v6
          else
            echo "IPv6 already exists."
          fi
          
          # Deploy with TAILSCALE_AUTH_KEY as a build argument
          flyctl deploy --ha=false --build-arg TAILSCALE_AUTH_KEY="${TAILSCALE_AUTH_KEY}" && flyctl scale count 1 -y
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
          TAILSCALE_AUTH_KEY: ${{ secrets.TAILSCALE_AUTH_KEY }}
          FLY_REGION: sin

      - name: Notify Tailscale update
        if: steps.check_tailscale.outputs.TAILSCALE_UPDATED == 'true'
        run: echo "Tailscale version was updated in this deployment."